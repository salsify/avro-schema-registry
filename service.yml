name: avro-schema-registry
owner: demand-api
class: platform
slack: pb-a-avro-schema-reg
configuration_opt_in_environments: true
pipeline:
  sandbox_cd_branch: main

staging:
  environment:
    RACK_ENV: staging
    RAILS_ENV: staging
production:
  environment:
    RACK_ENV: production
    RAILS_ENV: production
deployables:
  web:
    type: web
    port: 3000
    command: "bundle exec rails server -p 3000 -b 0.0.0.0"
    health_check_path: "/health_check"
    staging:
      host: "asr.staging-ezcater.net"
      replicas: 2
      environment:
        DISABLE_PASSWORD: "true"
    production:
      host: "asr.ezcater.net"
      replicas: 3
      environment:
        DISABLE_PASSWORD: "true"
  webcompat:
    type: web
    port: 3000
    command: "bundle exec rails server -p 3000 -b 0.0.0.0"
    replicas: 2
    health_check_path: "/health_check"
    staging:
      host: "asr-compat.staging-ezcater.com"
      environment:
        READ_ONLY_MODE: "true"
        DISABLE_PASSWORD: "false"
    production:
      host: "asr-compat.ezcater.com"
      environment:
        READ_ONLY_MODE: "true"
        DISABLE_PASSWORD: "false"
  dbmigrate:
    type: job
    command: bundle exec rake db:migrate
    environment:
      DISABLE_PASSWORD: "true"

predeploy:
- dbmigrate

tests:
  primary:
  - name: avro-schema-registry
    build: .
    command: tail -f /dev/null
    environment:
      POSTGRES_HOST: localhost
      POSTGRES_USER: ezcater
      PORT: 3000
  services:
  - name: postgres
    image: postgres:10.10
    environment:
      POSTGRES_USER: ezcater
      POSTGRES_DB: avro-schema-registry_test
  steps:
  - run:
      test: download cc-test-reporter
      command: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
        -o cc-test-reporter
  - run:
      test: cc-test-reporter permissions
      command: chmod +x ./cc-test-reporter
  - run:
      test: bundle config
      command: bundle config unset --local without
  - run:
      test: bundle
      command: bundle install
  - run:
      test: rubocop
      command: bundle exec rubocop
  - run:
      test: cc-before-build
      command: ./cc-test-reporter before-build
  - run:
      test: rspec
      command: bundle exec rspec --format documentation --format RspecJunitFormatter --out rspec.xml
  - run:
      test: cc-after-build
      command: ./cc-test-reporter after-build -t simplecov --exit-code $? || echo
        "Skipping Code Climate coverage upload"
